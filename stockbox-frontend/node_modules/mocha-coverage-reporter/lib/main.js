(function() {
  var Reporter, processFile;

  Reporter = function(runner) {
    return runner.on('end', function() {
      var cov, coverage, file, result;
      coverage = global._test_$jscoverage || global._$jscoverage || {};
      result = [];
      for (file in coverage) {
        cov = coverage[file];
        result.push(processFile(file, cov));
      }
      return process.stdout.write(JSON.stringify(result, null, 2));
    });
  };

  processFile = function(file, cov) {
    var hits, index, line, sloc, _i, _len, _ref;
    sloc = hits = 0;
    _ref = cov.source;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      line = _ref[index];
      if (typeof cov[index] !== 'undefined') {
        ++sloc;
      }
      if (cov[index]) {
        ++hits;
      }
    }
    return {
      file: file,
      coverage: parseFloat((hits / sloc * 100).toFixed(2))
    };
  };

  module.exports = Reporter;

}).call(this);
